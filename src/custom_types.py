from typing import List, Optional
from typing_extensions import TypedDict

from langchain_core.messages import BaseMessage
from playwright.async_api import Page


class BBox(TypedDict):
    """
    Represents a bounding box on a webpage, used for annotating and interacting with specific regions.
    Attributes:
        x (float): The x-coordinate of the bounding box
        y (float): the y-coordinate of the bounding box
        text (str): the text content within the bounding box
        type (str): the type or category of the bounding box, an html tag
        ariaLabel (str): the ARIA label associated with the element
    """

    x: float
    y: float
    text: str
    type: str
    ariaLabel: str


class Prediction(TypedDict):
    """
    Represents the prediction output generated by an agent, specifying the next action to be taken.

    Attributes:
        action (str): the type of action predicted (e.g. 'click')
        args (Optional[List[str]]): The arguments required for executing the action, if any.
    """

    action: str
    args: Optional[List[str]]


class Action(TypedDict):
    """
    Represents the prediction output generated by the navigation agent, specifying the next action to be taken.
    """

    action: str
    value: Optional[str]
    position: List[float]


class Plan(TypedDict):
    """Plan coming from the orchestrator"""

    thought: str
    tasks: Optional[List[str]]


class AgentState(TypedDict):
    """
    Represents the current state of the agent during execution, maintaining contextual data and observations.

    Attributes:
        page (Page): The Playwright page instance representing the current web page.
        objective (str): The input or command provided to the agent.
        img (str): A base64-encoded screenshot of the current state of the web page.
        bboxes (List[BBox]): A list of bounding boxes representing regions of interest on the page.
        prediction (Prediction): The agent's predicted action and any associated arguments.
        scratchpad (List[BaseMessage]): A collection of messages containing the intermediate steps taken by the agent.
        observation (str): The most recent response or output observed from a tool or environment.
    """

    step: int
    page: Page
    objective: str
    img: str  # b64 encoded screenshot
    plan: Optional[Plan]
    next_actions: Optional[List[Action]]  # ShowUI's output
    bboxes: List[BBox]
    prediction: str  # agent's output
    scratchpad: List[
        BaseMessage
    ]  # A system message or messages containing the intermediate steps
    nav_scratchpad: List[
        BaseMessage
    ]  # A system message or messages containing the intermediate steps
    observation: str  # the most recent response from a tool
    exit_code: str  # Exit code options: SUCCESS, URL_CHANGE, STATE_CHANGE_FAILURE, TOTAL_FAILURE
    # TODO(dominic): We should enforce that exit_code is only one of these options.
